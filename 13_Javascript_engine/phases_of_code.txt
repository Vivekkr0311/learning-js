You javascript code goes through various phases.
Javascript engine takes your code and then.
1. First it parses it.
2. Compiles it.
3. Executes it.

- Parsing: Code is converted into the token.
- Then Syntax Parser takes this stream of token check for syntax. Syntax parser generates AST (Abstract Syntax Tree).
- Compilation and Execution goes in hand to hand.
- The AST is passed to interpreter, and converts code into the bytecode.
- And then bytecode is executed. In the meantime compiler tries to optimize the bytecode hand in hand.
  So, job of compiler is to optimize the code during runtime, this is why it is called "JIT Compilation".

  In some javascript engine there is AOT. Ahead Of Time compilation. Compiler takes the code before execution and tries
  to optimize it as much as it can. Then it generates the bytecode which will go into the execution phase.

- Execution Phase: This execution phase used "Memory Heap" and a "callstack" to execute the bytecode.
- 


Javascript has something called as "JIT Compilation". Just In Time Compilation.
Javascript behaves as interpreted language as well as compiled language, everything
depends on javascript engine.

JIT Compilation uses interpreter as well as compiler.

Garbage Collector in javascript used a algorithm:
Basic idea about Mark & Sweep Algo:
It comprise of 2 phases - 
1. Mark phase
2. Sweep phase

All objects are marked as 0 initially (at creation) and in mark phase the objects that will be accessible are marked as 1 (reachable) by a DFS graph traversal.

During sweep phase, the objects marked with 0 are removed from heap memory. and also all reachable objects are again initialized with 0 (made unreachable) because the algorithm will run again.

Things learned:
1. JS runtime environment contains all elements required to run JS.
2. It contains JS engine, set of API's, callback queue, microtask queue, event loop.
3. JS engine is a piece of code.
4. Process includes Parsing ---> Compilation -----> Execution.
5. Parsing breaks code into tokens and converts it into AST(Abstract Syntax Tree).
6. Modern JS engine follows JIT compilation, it interprets while it optimises code as much as it can.
7. Execution and Compilation are done together.
8. Execution has Garbage collector and other optimisation such as inlining, copy elusion, inline caching etc.
9. Fell in love with JS. ❤❤