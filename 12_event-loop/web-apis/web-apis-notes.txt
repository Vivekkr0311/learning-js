To access all features of our web browser, in javascript we use "web apis".

Some "web apis" are:
 - setTimeout() -> setTimeout is not a part of the javascript.
 - DOM api      -> It is also not part of the javascript. (document.addListener )
 - fetch()      -> Not part of the javascript.
 - LocalStorage -> Not part of the javascript.
 - console      -> Not part of the javascript. (console.log())
 - Location     -> Not part of the javascript.
 - and there are a lot more.

Javascript engine give all these power to use these features of web browser.
In browsers we make use of these browser feature using global object in case of browsers
we have global object "window".

So, if you want to use "setTimeout".
You have to use "window.setTimeout()".
But as these "web apis" are present in global object, we can use them without mention "window".
like: "setTimeout" instead of "window.setTimeout"

Call back queue: When setTimeout puts the call back function into some other location, and after
                 the specified time when our callback function needs to be inseter into call stack,
                 our callback function does not go the call stack directly.
                 Callback function is first inserted into the callback queue.
Event loop:      Then event loop consistently checks if something is in the callback queue, if 
                 there is any function in the callback queue, event loop will take it and put it into
                 the call stack, so that javascript can execute that callback function now.
                 Event loop also keep checking the call stack.
                 As soon as event loop sees call stack is empty and there is one function waiting in the
                 callback queue to be executed, event loop take that function from the callback queue and puts
                 it into the call stack to be executed.

Q: Why do need this callback queue ??
ans: There could be so many callback function associated with many event listeners, 
    if all of them are triggered at once it will be chaos to execute all of these
    callback functions.
    This is why, we need this callback queue so that each one of them can be executed one after
    the other, and this way each function will get the chance to be execute.