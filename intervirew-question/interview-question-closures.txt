Q1: What is Closure in javascript ??
Ans: A function with its outer environment forms a Closure.
    In other words, closure is combination of function and its lexical
    scope bundled together, forms a Closure.

Q2: Can you explain little bit more about Closure ??
Ans: Eacn and every function in javascript has access to its
    lexical environment, means it has access variable and stuff
    present in its parent.
    So even when these function are executed in different scope not
    in original scope, it still remembers its outer lexical environment
    where it was originally present in the code.

Q3: Can you give example of this whatever you explained ??
Ans: function outer(){
        var a = 10;
        function inner(){
            console.log(a);
        }
        return inner;
    }

    outer()();

Q4: What did you do outer()() ??
Ans: outer()() is used here to execute the function which is returned by outer();.
    It is same as writing:

    var close = outer();
    close();

Q5: What if we replace "var a = 10;" just right before return ??
    Like:
        function outer(){
            function inner(){
                console.log(a);
            }
            var a = 10;
            return inner;
        }
Ans: Nothing will changes, output will be same. It will still form a Closure and
    it will work in the same way as before.

Q6: What if we change "var" to "let" ??
    Like:
        function outer(){
            function inner(){
                console.log(a);
            }
            let a = 10;
            return inner;
        }
ans: "let" is blocked scoped, but still this code will behave in the same way.
    So, inner function still forms a Closure even if the 'a' is 'let'.

Q7: What if outer function has some parameter ??
    Like:
        function outer(b){
            function inner(a){
                console.log(a, b);
            }
            var a = 10;
            return inner;
        }

        var close = outer("Hello, world!")
        close();
ans: Output will be, "10 Hello, world!"
    Parameter 'b' to outer function still comes in lexical environment of inner.
    Therefore, it still behave in the same way.

Q8: What if outer function is nested inside a function ??
    Like:
        fuction outest(){
            var c = 20;
            function outer(b){
                function inner(){
                    console.log(a, b, c);
                }
                return inner;
            }
            return outer;
        }

        var close = outest()("Helloworld!);
        close();
ans: Output: 10 Helloworld! 20
    It still forms a Closure.

Q9: What if we have conflicting variable in the global scope ??
    Like:
        function outest(){
            var c = 20;
            function outer(b){
                function inner(){
                    console.log(a);
                }
                let a = 10;
                return inner;
            }
            return outer;
        }

        let a = 100;
        var close = outest()("Helloworld");
        close();
ans: Output: 10 Helloworld 20
    The referene to 'a' which is inside lexical enviroment of inner is pointing to 10,
    not to 100. This is why, we get this output.

    We did not have "let a = 10;" inside outer, then it would have printed '100'.
    Because at first javascript looks for local scope then goes to global scope if variable is
    not found in local scope.

    If we had like:
    function outest(){
            var c = 20;
            function outer(b){
                function inner(){
                    console.log(a);
                }
                //let a = 10;
                return inner;
            }
            return outer;
        }

        let a = 100;
        var close = outest()("Helloworld");
        close();

        Then output would be: 10 Helloworld 100

        And if 'a' was not in global also, it would throw a 'reference error'.
        Because 'a' is not defined in anywhere in the scope chain.
        If we had like:
            function outest(){
                var c = 20;
                function outer(b){
                    function inner(){
                         console.log(a);
                    }
                    //let a = 10;
                     return inner;
                }
                return outer;
             }

            //let a = 100;
            var close = outest()("Helloworld");
            close();

            Output: ReferenceError

Q10: Can you tell me advantages of Closure ??
ans: Closure is used in:
        1. Module pattern
        2. Function curry
        3. Higher order functions
        4. Memoize
        5. It helps in data hidding and encapsulation

Q11: What is data hidding and encapusulation, and how does it work ??
ans: If we have some variable and we don't want other functions to access it or read it, we call this
     data hidding.
     We encapulate the data in such a way that other part of our code cannot access it.

Q12: Can you example of it ??
ans: If we have code like:
    var count = 0;
    function countIncrement(){
        count++;
    }

    Anybody in our code can access this "count". But we want this not to happend
    we can make use of Clousure to implement data hidding/ privacy to this variable.

    Like:
    function countFun(){
        var count = 0;
        function countIncrement(){
            count++;
            console.log(count);
        }
    }

    var counter1 = counter();
    counter1();
    counter1();

Output:
    1
    2

    console.log(count);
    We wrapped our code inside the function, now variable "count" is not accessible
    from outside the function "coundFun".
    It will give a "ReferenceError".

Q13: What will happend if we have code something like this:
    Code:
    function counter(){
        var count = 0;
        return function incrementCounter(){
            count++;
            console.log(count);
        }
    }

    var counter1 = counter();
    counter1();
    counter1();

    var counter2 = counter();
    counter2();

ans: counter2 will have fresh new scope of variable "count". It will start counting from 0 from start.
    Output:
        1
        2 //These 1 and 2 are printed by calling counter1() two times.
        1 //These 1 is printed by calling counter2().

Q14: Can this code is scalable, if we want to add decrement counter, can we scale this code ??
ans: This code is not following a good way, we consider that kind of scnenario.
     We can use "Constructor functions" for such scalability. 

    Code:
        function Counter(){
            var count = 0;
            this.incrementCounter = function (){
                count++;
                console.log(count);
            }
            this.decrementCounter = function (){
                count--;
                console.log(count);
            }
        }
        var counter1 = new Counter();

        counter1.incrementCounter();
        counter1.incrementCounter();
        counter1.decrementCounter();

       - Constructor function name should start with first letter being capital.
       - Then we make a call to this using "new" keyword.
       - This function still forms a Closure with the variable "count".